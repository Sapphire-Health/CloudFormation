Parameters:
  InstanceType:
    Type: String
    Default: m5.xlarge
    AllowedValues:
      - m5.large
      - m5.xlarge
      - m6i.large
      - m6i.xlarge

  ServerOS:
      Description: Server OS
      Type: String
      AllowedValues: [Server2022, Server2019, Server2016]
      ConstraintDescription: Must be supported Windows Server OS

  Server0IP:
    Description: Private IP address for Server 0
    Type: String
    MinLength: '7'
    MaxLength: '15'
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})
    ConstraintDescription: must be a valid IP of the form x.x.x.x

  Server1IP:
    Description: Private IP address for Server 1
    Type: String
    MinLength: '7'
    MaxLength: '15'
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})
    ConstraintDescription: must be a valid IP of the form x.x.x.x

  ApplicationName:
    Description: Application being deployed
    Type: String

  ServerName0:
    Description: Server Name for Server 0
    Type: String

  ServerName1:
    Description: Server Name for Server 1
    Type: String

  KeyPairName:
    Description: "Amazon EC2 Key Pair to connect to new instances"
    Type: AWS::EC2::KeyPair::KeyName 

  ServerVPCId:
    Description: VPC to create the VMs in
    Type: AWS::EC2::VPC::Id

  ServerSubnet0:
    Type: AWS::EC2::Subnet::Id
    Description: The subnet to create VM0 in

  ServerSubnet1:
    Type: AWS::EC2::Subnet::Id
    Description: The subnet to create VM0 in

  SecurityGroups:
    Type: List<AWS::EC2::SecurityGroup::Id>
    Description: Security Groups for the VMs being created

Rules:
  Subnet0InVPC:
    Assertions:
      - Assert:
          'Fn::Equals':
            - 'Fn::ValueOf':
                - ServerSubnet0
                - VpcId
            - Ref: ServerVPCId
        AssertDescription: All subnets must in the VPC
  Subnet1InVPC:
    Assertions:
      - Assert:
          'Fn::Equals':
            - 'Fn::ValueOf':
                - ServerSubnet1
                - VpcId
            - Ref: ServerVPCId
        AssertDescription: All subnets must in the VPC        
  SeparateSubnetAZs:
    Assertions:
      - Assert:
          'Fn::Not':
            - 'Fn::Equals':
              - 'Fn::ValueOf':
                  - ServerSubnet0
                  - AvailabilityZone
              - 'Fn::ValueOf':
                  - ServerSubnet1
                  - AvailabilityZone
        AssertDescription: Subnets must be in different AZs    
Mappings:
  RegionMap: 
    us-east-1:
      Server2022: ami-0fb5befc1450ca205
      Server2019: ami-0c95d38b24a19de18
      Server2016: ami-03fdc8b14e44968e6
    us-east-2:
      Server2022: ami-02bddcf6b9473bd61
      Server2019: ami-0d72555523e18b6d7
      Server2016: ami-04d1c6a7290ee815a
    us-west-1:
      Server2022: ami-03f9d9db9db74d02a
      Server2019: ami-0a6faf8a86971bd15
      Server2016: ami-0422fbbb4ff0c83b6
    us-west-2:
      Server2022: ami-090b2f6d3af372d21
      Server2019: ami-0e6bf13e3eb85d0ba
      Server2016: ami-034e86083b6e63887

Resources:
  #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-network-iface-embedded.html
  NIC0:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: !Sub 'NIC for ${ServerName0}'
      GroupSet: !Ref SecurityGroups
      PrivateIpAddress: !Ref Server0IP
      SubnetId: !Ref ServerSubnet0
      Tags:
        - Key: Name
          Value: !Sub '${ServerName0}-NIC0-${AWS::StackName}'
  NIC1:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: !Sub 'NIC for ${ServerName1}'
      GroupSet: !Ref SecurityGroups
      PrivateIpAddress: !Ref Server1IP
      SubnetId: !Ref ServerSubnet1
      Tags:
        - Key: Name
          Value: !Sub '${ServerName1}-NIC1-${AWS::StackName}'             

  #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-instance.html
  Server0:
    Type: AWS::EC2::Instance
    Properties: 
      AvailabilityZone: !Select [0, Fn::GetAZs: !Ref AWS::Region]
      BlockDeviceMappings: 
      - DeviceName: "/dev/sda1"
        Ebs: 
          VolumeType: "gp3"
          DeleteOnTermination: "false"
          VolumeSize: "50"      
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', !Ref ServerOS]
      InstanceType: !Ref InstanceType 
      KeyName: !Ref KeyPairName
      NetworkInterfaces:
        - DeviceIndex: "0"
          NetworkInterfaceId: !Ref "NIC0"
      Tags: 
        - Key: Name
          Value: !Ref ServerName0

  Server1:
    Type: AWS::EC2::Instance
    Properties: 
      AvailabilityZone: !Select [1, Fn::GetAZs: !Ref AWS::Region]
      BlockDeviceMappings: 
      - DeviceName: "/dev/sda1"
        Ebs: 
          VolumeType: "gp3"
          DeleteOnTermination: "false"
          VolumeSize: "50"      
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', !Ref ServerOS]
      InstanceType: !Ref InstanceType 
      KeyName: !Ref KeyPairName
      NetworkInterfaces:
        - DeviceIndex: "0"
          NetworkInterfaceId: !Ref "NIC1"
      Tags: 
        - Key: Name
          Value: !Ref ServerName1    


